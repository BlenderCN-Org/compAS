from brg.datastructures.mesh.mesh import Mesh
from brg.datastructures.network.network import Network


__author__     = ['Tom Van Mele', ]
__copyright__  = 'Copyright 2014, BLOCK Research Group - ETH Zurich'
__license__    = 'MIT License'
__version__    = '0.1'
__email__      = 'vanmelet@ethz.ch'
__status__     = 'Development'
__date__       = 'Dec 15, 2014'


class Cell(Mesh):
    """"""

    default_vertex_attributes = Mesh.default_vertex_attributes.copy()
    default_face_attributes = Mesh.default_face_attributes.copy()
    default_edge_attributes = Mesh.default_edge_attributes.copy()

    def __init__(self):
        super(CellNet, self).__init__()

    # --------------------------------------------------------------------------
    # descriptors
    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # constructors
    # --------------------------------------------------------------------------

    # --------------------------------------------------------------------------
    # ...
    # --------------------------------------------------------------------------


class CellNet(Network):
    """"""

    def __init__(self):
        super(CellNet, self).__init__()
        self._ckey = 0

    # --------------------------------------------------------------------------
    # descriptors
    # --------------------------------------------------------------------------

    def __str__(self):
        print 'test'

    # --------------------------------------------------------------------------
    # constructors
    # --------------------------------------------------------------------------

    @classmethod
    def from_vertices_and_cells(cls, vertices, cells):
        pass

    # --------------------------------------------------------------------------
    # modifiers
    # --------------------------------------------------------------------------


# ==============================================================================
# Debugging
# ==============================================================================

if __name__ == "__main__":

    #         18------19
    #       16------17|
    #        |      | |
    #   5----|-4----|-11-----15
    # 6------7------10-----14|
    # | |    | |    | |    | |
    # | 3----|-2----|-9----|-13
    # 0------1------8------12

    c1 = [[0, 3, 2, 1],
          [0, 1, 7, 6],
          [0, 6, 5, 3],
          [4, 2, 3, 5],
          [4, 7, 1, 2],
          [4, 5, 6, 7]]
    c2 = [[2, 1, 7, 4],
          [2, 9, 8, 1],
          [8, 9, 11, 10],
          [4, 7, 10, 11],
          [7, 1, 8, 10],
          [4, 11, 9, 2]]
    c3 = [[10, 11, 9, 8],
          [9, 13, 12, 8],
          [12, 13, 15, 14],
          [10, 14, 15, 11],
          [10, 8, 12, 14],
          [11, 15, 13, 9]]
    c4 = [[16, 17, 19, 18],
          [4, 18, 19, 11],
          [16, 7, 10, 17],
          [16, 18, 4, 7],
          [19, 17, 10, 11],
          [4, 11, 10, 7]]

    vertices = [[0, 0, 0],
                [1, 0, 0],
                [1, 1, 0],
                [0, 1, 0],
                [1, 1, 1],
                [0, 1, 1],
                [0, 0, 1],
                [1, 0, 1],
                [2, 0, 0],
                [2, 1, 0],
                [2, 0, 1],
                [2, 1, 1],
                [3, 0, 0],
                [3, 1, 0],
                [3, 0, 1],
                [3, 1, 1],
                [1, 0, 2],
                [2, 0, 2],
                [1, 1, 2],
                [2, 1, 2]]

    cells = [c1, c2, c3, c4]

    cellnet = CellNet.from_vertices_and_cells(vertices, cells)
